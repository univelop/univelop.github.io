[
  {
    "name": "currentUserName",
    "description": "Name des aktuellen Benutzers",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "currentUserName",
    "parameters": [],
    "examples": [
      {
        "expression": "currentUserName",
        "returnValue": "John Doe",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "currentUserId",
    "description": "ID des aktuellen Benutzers",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "currentUserId",
    "parameters": [],
    "examples": [
      {
        "expression": "currentUserId",
        "returnValue": "zdxmHQXUMJWsZHKwKInRePrK6Tt2",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "currentUserEmail",
    "description": "E-Mail des aktuellen Benutzers",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "currentUserEmail",
    "parameters": [],
    "examples": [
      {
        "expression": "currentUserEmail",
        "returnValue": "john.doe@email.com",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "currentUserRoleName",
    "description": "Rollenname des aktuellen Benutzers",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "currentUserRoleName",
    "parameters": [],
    "examples": [
      {
        "expression": "currentUserRoleName",
        "returnValue": "Admin",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "currentUserRoleId",
    "description": "Rollen-Id des aktuellen Benutzers",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "currentUserRoleId",
    "parameters": [],
    "examples": [
      {
        "expression": "currentUserRoleId",
        "returnValue": "87898ob2",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "toText",
    "description": "Wandelt einen nicht textuellen Wert (Zahlen, dynamische Werte, Datum, Objekte) in eine textuelle Darstellung des Wertes um",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "toText(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toText(123)",
        "returnValue": "123",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "contains",
    "description": "Gibt true/false abhängig davon zurück, ob *sub* in *text* vorhanden ist.",
    "returns": "Ja/Nein",
    "category": "text",
    "categoryName": "Text",
    "expression": "contains(text, sub)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "sub",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "contains(\"Hello World\", \"World\")",
        "returnValue": "true",
        "returnType": "Ja/Nein"
      },
      {
        "expression": "contains(\"Hello World\", \"Sun\")",
        "returnValue": "false",
        "returnType": "Ja/Nein"
      }
    ],
    "isVariable": false
  },
  {
    "name": "replace",
    "description": "Ersetzt jedes vorkommen von *find* in *text* mit *sub*",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "replace(text, find, sub)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "find",
        "type": "Text",
        "optional": false
      },
      {
        "name": "sub",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "replace(\"Hello World\", \"World\", \"Universe\")",
        "returnValue": "Hello Universe",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "replaceRegExp",
    "description": "Ersetzt jedes vorkommen von *regexpText* in *text* mit *sub*",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "replaceRegExp(text, regexpText, sub)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "regexpText",
        "type": "Text",
        "optional": false
      },
      {
        "name": "sub",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "replaceRegExp(\"Hello World\", \"W.*d\", \"Universe\")",
        "returnValue": "Hello Universe",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "substring",
    "description": "Liefert den Ausschnitt aus *text*, welcher an Zeichen *start* - 1 beginnt und an *end* endet. Wird *end* nicht angegeben, so wird der Text ab *start* bis zum Ende zurückgegeben",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "substring(text, start, [end])",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "start",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "end",
        "type": "Zahl",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "substring(\"Hello World\", 6)",
        "returnValue": "World",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "trim",
    "description": "Entfernt Leerzeichen am Anfang und Ende eines Textes",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "trim(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "trim(\"   Hello World   \")",
        "returnValue": "Hello World",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "basicAuth",
    "description": "Verschlüsselt *username* und *password*",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "basicAuth(username, password)",
    "parameters": [
      {
        "name": "username",
        "type": "Text",
        "optional": false
      },
      {
        "name": "password",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "basicAuth(\"Univelop\",\"uni123!\")",
        "returnValue": "VW5pdmVsb3A6dW5pMTIzIQ==",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "randomString",
    "description": "Erzeugt eine zufällige Zeichenkette mit der Länge *length* (bestehend aus Kleinbuchstaben und Zahlen)",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "randomString(length)",
    "parameters": [
      {
        "name": "length",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "randomString(10)",
        "returnValue": "f49gf623bk",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "firstLetters",
    "description": "Gibt *count* Zeichen von Beginn an zurück",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "firstLetters(value, count)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      },
      {
        "name": "count",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "firstLetters(\"Hello World\", 5)",
        "returnValue": "Hello",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "lastLetters",
    "description": "Liefert die Anzahl an *count* Zeichen vom Ende des Textes",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "lastLetters(value, count)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      },
      {
        "name": "count",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "lastLetters(\"Hello World\", 5)",
        "returnValue": "World",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "firstWords",
    "description": "Gibt *count* Worte von Beginn an zurück. Als Worte zählen solche, die durch mindestens ein Leerzeichen getrennt sind.",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "firstWords(value, count)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      },
      {
        "name": "count",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "firstWords(\"Hello World\", 1)",
        "returnValue": "Hello",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "lastWords",
    "description": "Liefert die Anzahl an *count* Wörtern vom Ende des Textes. Als Wörter zählen solche, die durch mindestens ein Leerzeichen getrennt sind.",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "lastWords(value, count)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      },
      {
        "name": "count",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "lastWords(\"Hello World\", 1)",
        "returnValue": "World",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "getFirst",
    "description": "Sucht in *text* nach dem ersten Treffer von *regexText*. Mit *groupIndexOrName* kann eine spezifische Capture Group zurückgegeben werden, andernfalls wird der gesamte Treffer zurückgegeben. Wenn kein Treffer gefunden wird, gibt es einen leeren String zurück.",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "getFirst(regexpText, text, [groupIndexOrName])",
    "parameters": [
      {
        "name": "regexpText",
        "type": "Text",
        "optional": false
      },
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "groupIndexOrName",
        "type": "Dynamischer Wert",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "getFirst(\"(d+)\", \"abc 123 def\", 1)",
        "returnValue": "123",
        "returnType": "Text"
      },
      {
        "expression": "getFirst(\"(?<letters>[a-z]+)",
        "returnValue": "abc123",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "getAll",
    "description": "Durchsucht *text* nach allen Vorkommen von *regexText* und gibt eine Liste von Maps zurück, in denen der Key die jeweilige Capture Group repräsentiert.",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "getAll(regexpText, text)",
    "parameters": [
      {
        "name": "regexpText",
        "type": "Text",
        "optional": false
      },
      {
        "name": "text",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "getAll(\"([a-z]+)(\\d+)\", \"abc123abc123\")",
        "returnValue": "[{full: abc123, 1: abc, 2: 123}, {full: abc123, 1: abc, 2: 123}]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "toUpperCase",
    "description": "Konvertiert *text* zu Großbuchstaben",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "toUpperCase(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toUpperCase(\"Hello World\")",
        "returnValue": "HELLO WORLD",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "toLowerCase",
    "description": "Konvertiert *text* zu Kleinbuchstaben",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "toLowerCase(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toLowerCase(\"Hello World\")",
        "returnValue": "hello world",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "base64Encode",
    "description": "Kodiert den gegebenen Text mithilfe des base64 Verfahrens",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "base64Encode(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "base64Encode(\"Hello World\")",
        "returnValue": "SGVsbG8gV29ybGQ=",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "base64Decode",
    "description": "Dekodiert einen mit dem base64 kodierten Text zurück in den Ursprung",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "base64Decode(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "base64Decode(\"SGVsbG8gV29ybGQ=\")",
        "returnValue": "Hello World",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "parseJson",
    "description": "Konvertiert einen Json-String zu einem Json-Objekt",
    "returns": "Dynamischer Wert",
    "category": "text",
    "categoryName": "Text",
    "expression": "parseJson(jsonText)",
    "parameters": [
      {
        "name": "jsonText",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "parseJson('{\"name\":\"John\"}')",
        "returnValue": "{name: John}",
        "returnType": "Dynamischer Wert"
      }
    ],
    "isVariable": false
  },
  {
    "name": "jsonEncode",
    "description": "Wandelt *value* in einen JSON String um.",
    "returns": "Dynamischer Wert",
    "category": "text",
    "categoryName": "Text",
    "expression": "jsonEncode(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "jsonEncode({name: \"John\"})",
        "returnValue": "{\"name\":\"John\"}",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "toCharCode",
    "description": "Wandelt das angegebene Zeichen in dessen numerischen Zeichencode um",
    "returns": "Zahl",
    "category": "text",
    "categoryName": "Text",
    "expression": "toCharCode(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toCharCode(\"a\")",
        "returnValue": "97",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "fromCharCode",
    "description": "Wandelt den angegebenen numerischen Zeichencode in das entsprechende Zeichen um",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "fromCharCode(number)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "fromCharCode(97)",
        "returnValue": "a",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "toRadixString",
    "description": "Wandelt die angegebene Zahl, dargestellt als Zeichenkette in der entsprechenden Basis, zurück in den numerischen Wert um.(2: Binär, 16: Hexadezimal, 8: Oktal, 36: Base36)",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "toRadixString(number, radix)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "radix",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toRadixString(10, 2)",
        "returnValue": "1010",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "fromRadixString",
    "description": "Wandelt die angegebene Zahl in eine Zeichenkettendarstellung der entsprechenden Basis um.(2: Binär, 16: Hexadezimal, 8: Oktal, 36: Base36)",
    "returns": "Zahl",
    "category": "text",
    "categoryName": "Text",
    "expression": "fromRadixString(text, radix)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "radix",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "fromRadixString(\"1010\", 2)",
        "returnValue": "10",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "base64ToBinary",
    "description": "Konvertiert einen Base64-String in eine Binäre Liste.",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "base64ToBinary(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "base64ToBinary(\"SGVsbG8gV29ybGQ=\")",
        "returnValue": "01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "binaryToBase64",
    "description": "Konvertiert eine Binäre Liste in einen Base64-String.",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "binaryToBase64(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "binaryToBase64(\"01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100\")",
        "returnValue": "SGVsbG8gV29ybGQ=",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "split",
    "description": "Teilt *text* and jedem *delimiter*",
    "returns": "Liste",
    "category": "text",
    "categoryName": "Text",
    "expression": "split(text, delimiter)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      },
      {
        "name": "delimiter",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "split(\"Hello World\", \" \")",
        "returnValue": "[\"Hello\", \"World\"]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "ceil",
    "description": "Aufrunden auf eine ganze Zahl",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "ceil(number)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "ceil(1.5)",
        "returnValue": "2",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "floor",
    "description": "Abrunden auf eine ganze Zahl",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "floor(number)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "floor(1.5)",
        "returnValue": "1",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "round",
    "description": "Runden auf die nächstgelegene ganze Zahl",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "round(number)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "round(1.5)",
        "returnValue": "2",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "decimalRound",
    "description": "Runden auf bestimmte Anzahl von Nachkommastellen",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "decimalRound(number, decimalPlaces)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "decimalPlaces",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "decimalRound(1.2345, 2)",
        "returnValue": "1.23",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "power",
    "description": "Berechnet number1 hoch number2",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "power(number1, number2)",
    "parameters": [
      {
        "name": "number1",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "number2",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "power(2, 3)",
        "returnValue": "8",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "abs",
    "description": "Betragsfunktion",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "abs(number)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "abs(-5)",
        "returnValue": "5",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "toNumber",
    "description": "Wandelt einen Text in eine numerische Darstellung des Wertes um",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "toNumber(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toNumber(\"123\")",
        "returnValue": "123",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "textLength",
    "description": "Gibt die Textlänge inklusive aller Sonderzeichen und Leerzeichen aus",
    "returns": "Zahl",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "textLength(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "textLength(\"Hello World\")",
        "returnValue": "11",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "formatNumber",
    "description": "Formatiert die Nummer ins gewünschte Format",
    "returns": "Text",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "formatNumber(number, decimalCount, thousandSeparator)",
    "parameters": [
      {
        "name": "number",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "decimalCount",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "thousandSeparator",
        "type": "Ja/Nein",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "formatNumber(1234.567, 2, true)",
        "returnValue": "1.234,57",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "range",
    "description": "Generiere eine Liste an Zahlen, von *start* bis *end* mit einer Schrittgröße von *step*. Standardmäßig ist *step=1*",
    "returns": "Liste",
    "category": "number",
    "categoryName": "Nummer",
    "expression": "range(start, end, [step])",
    "parameters": [
      {
        "name": "start",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "end",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "step",
        "type": "Zahl",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "range(1, 5)",
        "returnValue": "[1, 2, 3, 4, 5]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "formatDate",
    "description": "Formatiert ein Datum in die gewählte Formatierung",
    "returns": "Text",
    "category": "date",
    "categoryName": "Datum",
    "expression": "formatDate(date, format)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "format",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "formatDate(now(), \"dd.MM.yyyy\")",
        "returnValue": "01.01.2022",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "date",
    "description": "Erstellt ein Datum aus gegebenem Jahr, Monat und Tag",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "date(year, month, day)",
    "parameters": [
      {
        "name": "year",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "month",
        "type": "Zahl",
        "optional": false
      },
      {
        "name": "day",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "date(2022, 1, 1)",
        "returnValue": "01.01.2022",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "parseDate",
    "description": "Erstellt Datum aus Text im Format \"dd.mm.yy\" oder \"dd.mm.yyyy\", nur dieses Format ist zulässig",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "parseDate(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "parseDate(\"01.01.2022\")",
        "returnValue": "01.01.2022",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "tryParseDate",
    "description": "Versucht ein Datum aus *value* zu machen. Tritt ein Fehler auf wird defaultDateTime zurück gegeben",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "tryParseDate(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "tryParseDate(\"01.01.2022\")",
        "returnValue": "01.01.2022",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "today",
    "description": "Datum, bestehend aus dem aktuellen Tag um 00:00 Uhr",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "today()",
    "parameters": [],
    "examples": [
      {
        "expression": "today()",
        "returnValue": "01.01.2022 00:00:00.000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "now",
    "description": "Datum, bestehend aus dem aktuellen Zeitpunkt",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "now()",
    "parameters": [],
    "examples": [
      {
        "expression": "now()",
        "returnValue": "01.01.2022 12:23:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "defaultDateTime",
    "description": "Gibt das Datum 00:00 01.01.1970. Dieses Datum wird nicht angezeigt",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "defaultDateTime",
    "parameters": [],
    "examples": [
      {
        "expression": "defaultDateTime",
        "returnValue": "1970-01-01 00:00:00.000",
        "returnType": "Datum"
      }
    ],
    "isVariable": true
  },
  {
    "name": "currentWeek",
    "description": "Aktuelle Kalenderwoche",
    "returns": "Text",
    "category": "date",
    "categoryName": "Datum",
    "expression": "currentWeek",
    "parameters": [],
    "examples": [
      {
        "expression": "currentWeek",
        "returnValue": "2022-W01",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "calendarWeek",
    "description": "Kalenderwoche des gegebenen Datums",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "calendarWeek(date)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "calendarWeek(now())",
        "returnValue": "24",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "startOfWeek",
    "description": "Start der aktuellen Kalenderwoche",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "startOfWeek([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "startOfWeek(now())",
        "returnValue": "14.06.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "endOfWeek",
    "description": "Ende der aktuellen Kalenderwoche",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "endOfWeek([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "endOfWeek(now())",
        "returnValue": "20.06.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "dateToWeek",
    "description": "Kalenderwoche des Datums",
    "returns": "Text",
    "category": "date",
    "categoryName": "Datum",
    "expression": "dateToWeek(date)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "calendarWeek(parseDate(\"2025-01-20\"))",
        "returnValue": "2025-W04",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addWeeks",
    "description": "Wochen auf ein Datum oder einen Wochentext addieren",
    "returns": "Dynamischer Wert",
    "category": "date",
    "categoryName": "Datum",
    "expression": "addWeeks(date/week, weeks)",
    "parameters": [
      {
        "name": "date/week",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "weeks",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addWeeks(today(),1)",
        "returnValue": "22.06.2021 8:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "subtractWeeks",
    "description": "Subtrahiere Wochen von einem Datum oder Wochentext",
    "returns": "Dynamischer Wert",
    "category": "date",
    "categoryName": "Datum",
    "expression": "subtractWeeks(date/week, weeks)",
    "parameters": [
      {
        "name": "date/week",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "weeks",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "subtractWeeks(today(),1)",
        "returnValue": "15.06.2021 8:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "currentMonth",
    "description": "Liefert den aktuellen Monat in Form eines Textes",
    "returns": "Text",
    "category": "date",
    "categoryName": "Datum",
    "expression": "currentMonth",
    "parameters": [],
    "examples": [
      {
        "expression": "currentMonth",
        "returnValue": "2024-06",
        "returnType": "Text"
      }
    ],
    "isVariable": true
  },
  {
    "name": "currentYear",
    "description": "Aktuelles Jahr als Zahl",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "currentYear",
    "parameters": [],
    "examples": [
      {
        "expression": "currentYear",
        "returnValue": "2025",
        "returnType": "Zahl"
      }
    ],
    "isVariable": true
  },
  {
    "name": "startOfMonth",
    "description": "Beginn des aktuellen Monats",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "startOfMonth([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "startOfMonth()",
        "returnValue": "01.06.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "endOfMonth",
    "description": "Ende des aktuellen Monats",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "endOfMonth([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "endOfMonth()",
        "returnValue": "30.06.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "dateToMonth",
    "description": "Jahr und Monat im Format YYYY-MM",
    "returns": "Text",
    "category": "date",
    "categoryName": "Datum",
    "expression": "dateToMonth(date)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "dateToMonth(parseDate(\"2025-01-17\"))",
        "returnValue": "2025-01",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addMonths",
    "description": "Monate auf ein Datum oder Monatstext addieren",
    "returns": "Dynamischer Wert",
    "category": "date",
    "categoryName": "Datum",
    "expression": "addMonths(date/month, months)",
    "parameters": [
      {
        "name": "date/month",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "months",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addMonths(today(), 1)",
        "returnValue": "01.07.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "subtractMonths",
    "description": "Monate von einem Datum oder Monatstext subtrahieren",
    "returns": "Dynamischer Wert",
    "category": "date",
    "categoryName": "Datum",
    "expression": "subtractMonths(date/month, months)",
    "parameters": [
      {
        "name": "date/month",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "months",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "subtractMonths(today(), 1)",
        "returnValue": "01.05.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addYears",
    "description": "Addiert eine Anzahl von Jahren zu einem Datum",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "addYears(date, years)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "years",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addYears(today(), 5)",
        "returnValue": "20.01.2030 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "subtractYears",
    "description": "Subtrahiert eine Anzahl von Jahren von einem Datum",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "subtractYears(date, years)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "years",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "subtractYears(today(), 5)",
        "returnValue": "20.01.2020 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "startOfQuarter",
    "description": "Beginn des aktuellen Quartals",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "startOfQuarter([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "startOfQuarter()",
        "returnValue": "01.04.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "endOfQuarter",
    "description": "Ende des aktuellen Quartals",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "endOfQuarter([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "endOfQuarter()",
        "returnValue": "30.06.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "startOfYear",
    "description": "Beginn des aktuellen Jahres",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "startOfYear([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "startOfYear()",
        "returnValue": "01.01.2021 00:00:00.000000, ",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "endOfYear",
    "description": "Ende des aktuellen Jahres",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "endOfYear([date])",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "endOfYear()",
        "returnValue": "31.12.2021 00:00:00.000000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addMinutes",
    "description": "Minuten auf einen Zeitpunkt addieren",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "addMinutes(date, minutes)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "minutes",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addMinutes(now(), 2)",
        "returnValue": "01.01.2022 12:23:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "subtractMinutes",
    "description": "Minuten von einem Zeitpunkt subtrahieren",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "subtractMinutes(date, minutes)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "minutes",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "subtractMinutes(now(), 2)",
        "returnValue": "01.01.2022 12:21:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addHours",
    "description": "Addiert Stunden auf den gegebenen Zeitpunkt.",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "addHours(date, hours)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "hours",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addHours(now(), 2)",
        "returnValue": "01.01.2022 14:23:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "subtractHours",
    "description": "Subtrahiert Stunden von dem gegebenen Zeitpunkt.",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "subtractHours(date, hours)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "hours",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "subtractHours(now(), 2)",
        "returnValue": "01.01.2022 10:23:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addDays",
    "description": "Addiert Tage auf den gegebenen Zeitpunkt.",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "addDays(date, days)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "days",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addDays(now(), 1)",
        "returnValue": "02.01.2022 12:23:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "subtractDays",
    "description": "Subtrahiert Tage von dem gegebenen Zeitpunkt.",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "subtractDays(date, days)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "days",
        "type": "Zahl",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "subtractDays(now(), 1)",
        "returnValue": "31.12.2021 12:23:57.432",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "datesBetween",
    "description": "Daten zwischen den zwei gegebenen Daten. Unter [option] kann optional über den Text \"weekdays\" angegeben werden, dass nur Werktage angegeben werden sollen.",
    "returns": "Liste",
    "category": "date",
    "categoryName": "Datum",
    "expression": "datesBetween(startDate, endDate, [options])",
    "parameters": [
      {
        "name": "startDate",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "endDate",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "options",
        "type": "Text",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "datesBetween(date(2022, 1, 1), date(2022, 1, 5))",
        "returnValue": "[01.01.2022, 02.01.2022, 03.01.2022, 04.01.2022, 05.01.2022]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "daysBetween",
    "description": "Anzahl der Tage zwischen dem *startDate* und dem *endDate*",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "daysBetween(startDate, endDate)",
    "parameters": [
      {
        "name": "startDate",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "endDate",
        "type": "Datum",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "daysBetween(date(2022, 1, 1), date(2022, 1, 5))",
        "returnValue": "4",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "hoursBetween",
    "description": "Anzahl der Stunden zwischen dem *startDate* und dem *endDate*",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "hoursBetween(startDate, endDate)",
    "parameters": [
      {
        "name": "startDate",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "endDate",
        "type": "Datum",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "hoursBetween(parseDate(\"10.10.2022 06:00:00\"), parseDate(\"10.10.2022 10:00:00\"))",
        "returnValue": "4",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "get",
    "description": "Holt den Wert von *key* aus *map/list*. *defaultValue* kann optional angegeben werden und wird zurück gegeben wenn ein Fehler auftritt",
    "returns": "Dynamischer Wert",
    "category": "list",
    "categoryName": "Liste",
    "expression": "get(map/list, key, [defaultValue])",
    "parameters": [
      {
        "name": "map/list",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "key",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "defaultValue",
        "type": "Dynamischer Wert",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "get({name: \"John\", age: 30}, \"name\")",
        "returnValue": "John",
        "returnType": "Text"
      },
      {
        "expression": "get([0,1,2,3], 2)",
        "returnValue": "2",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "toMap",
    "description": "Konvertiert ein Objekt in eine Map.",
    "returns": "Dynamischer Wert",
    "category": "list",
    "categoryName": "Liste",
    "expression": "toMap(object)",
    "parameters": [
      {
        "name": "object",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "toMap(file).name",
        "returnValue": "Report.txt",
        "returnType": "Text"
      },
      {
        "expression": "toMap(null)",
        "returnValue": "{}",
        "returnType": "Dynamischer Wert"
      }
    ],
    "isVariable": false
  },
  {
    "name": "count",
    "description": "Zählt die Elemente einer Liste/eines dynamischen Wertes",
    "returns": "Zahl",
    "category": "list",
    "categoryName": "Liste",
    "expression": "count(list)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "count([1,2,2,3])",
        "returnValue": "4",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "listToText",
    "description": "Listet alle Elemente einer Liste auf, getrennt durch einen optionalen Separator (wenn nicht angegeben, wird standardmäßig ',' genommen).",
    "returns": "Text",
    "category": "list",
    "categoryName": "Liste",
    "expression": "listToText(list, separator)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "separator",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "listToText([1,2,3], \"-\")",
        "returnValue": "1-2-3",
        "returnType": "Text"
      },
      {
        "expression": "listToText([\"Peter\",\"Mark\",\"David\"], \", \")",
        "returnValue": "Peter, Mark, David",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "addToList",
    "description": "Fügt einer Liste ein Element hinten an.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "addToList(list, element)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "element",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "addToList([1,2,3], 4)",
        "returnValue": "[1,2,3,4]",
        "returnType": "Liste"
      },
      {
        "expression": "addToList([\"Peter\",\"Mark\"], \"Alan\")",
        "returnValue": "[\"Peter\", \"Mark\", \"Alan\"]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "removeFromList",
    "description": "Entfernt ein Element aus einer Liste.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "removeFromList(list, element)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "element",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "removeFromList([1,2,3], 2)",
        "returnValue": "[1,3]",
        "returnType": "Liste"
      },
      {
        "expression": "removeFromList([\"Peter\",\"Mark\",\"David\"], \"Mark\")",
        "returnValue": "[\"Peter\", \"David\"]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "joinLists",
    "description": "Verbindet zwei Listen, indem die zweite Liste der ersten angehängt wird.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "joinLists(list, list2)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "list2",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "joinLists([1,2], [3,4])",
        "returnValue": "[1,2,3,4]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "parseList",
    "description": "Parst einen String in eine Liste, getrennt durch einen optionalen Separator.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "parseList(value, [separator])",
    "parameters": [
      {
        "name": "value",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "separator",
        "type": "Text",
        "optional": true
      }
    ],
    "examples": [
      {
        "expression": "parseList(\"1,2,3\", \",\")",
        "returnValue": "[1, 2, 3]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "listIntersection",
    "description": "Gibt die Schnittmenge zweier Listen zurück.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "listIntersection(list1, list2)",
    "parameters": [
      {
        "name": "list1",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "list2",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "listIntersection([1,2], [2,3])",
        "returnValue": "[2]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "listUnion",
    "description": "Gibt die Vereinigung zweier Listen zurück.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "listUnion(list1, list2)",
    "parameters": [
      {
        "name": "list1",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "list2",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "listUnion([1,2,3], [2,3,4])",
        "returnValue": "[1,2,3,4]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "listEquals",
    "description": "Prüft, ob sich zwei Listen gleichen.",
    "returns": "Ja/Nein",
    "category": "list",
    "categoryName": "Liste",
    "expression": "listEquals(list1, list2)",
    "parameters": [
      {
        "name": "list1",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "list2",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "listEquals([1,2,3], [1,2,3])",
        "returnValue": "true",
        "returnType": "Ja/Nein"
      }
    ],
    "isVariable": false
  },
  {
    "name": "listDifference",
    "description": "Gibt die Differenz zweier Listen zurück.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "listDifference(list1, list2)",
    "parameters": [
      {
        "name": "list1",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "list2",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "listDifference([1,2,3], [2,3])",
        "returnValue": "[1]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "listSymmetricDifference",
    "description": "Berechnet die symmetrische Differenz zweier Listen.",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "listSymmetricDifference(list1, list2)",
    "parameters": [
      {
        "name": "list1",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "list2",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "listSymmetricDifference([1,2,3], [2,3,4])",
        "returnValue": "[1,4]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "contains",
    "description": "Gibt true/false abhängig davon zurück, ob *sub* in *text* vorhanden ist.",
    "returns": "Ja/Nein",
    "category": "list",
    "categoryName": "Liste",
    "expression": "contains(list, item)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      },
      {
        "name": "item",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "contains([1,2,3], 2)",
        "returnValue": "true",
        "returnType": "Ja/Nein"
      },
      {
        "expression": "contains([\"Peter\",\"Mark\",\"David\"], \"Mark\")",
        "returnValue": "true",
        "returnType": "Ja/Nein"
      }
    ],
    "isVariable": false
  },
  {
    "name": "indexOf",
    "description": "Gibt den index von *value* in *list/text* zurück",
    "returns": "Zahl",
    "category": "list",
    "categoryName": "Liste",
    "expression": "indexOf(list/text, value)",
    "parameters": [
      {
        "name": "list/text",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "value",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "indexOf([1,2,3], 2)",
        "returnValue": "1",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "if",
    "description": "Wenn die Bedingung wahr ist, dann liefere den 'then' Wert.",
    "returns": "Dynamischer Wert",
    "category": "logic",
    "categoryName": "Logik",
    "expression": "if(condition, then)",
    "parameters": [
      {
        "name": "condition",
        "type": "Ja/Nein",
        "optional": false
      },
      {
        "name": "then",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "if(true, \"Hello\")",
        "returnValue": "Hello",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "ifElse",
    "description": "Wenn die Bedingung wahr ist, dann liefere den 'then' Wert, ansonsten den 'else' Wert.",
    "returns": "Dynamischer Wert",
    "category": "logic",
    "categoryName": "Logik",
    "expression": "ifElse(condition, then, else)",
    "parameters": [
      {
        "name": "condition",
        "type": "Ja/Nein",
        "optional": false
      },
      {
        "name": "then",
        "type": "Dynamischer Wert",
        "optional": false
      },
      {
        "name": "else",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "ifElse(true, \"Hello\", \"World\")",
        "returnValue": "Hello",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "empty",
    "description": "Prüft ob *value* leer ist",
    "returns": "Ja/Nein",
    "category": "logic",
    "categoryName": "Logik",
    "expression": "empty(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "empty(\"\")",
        "returnValue": "true",
        "returnType": "Ja/Nein"
      }
    ],
    "isVariable": false
  },
  {
    "name": "notEmpty",
    "description": "Prüft ob *value* nicht leer ist",
    "returns": "Ja/Nein",
    "category": "logic",
    "categoryName": "Logik",
    "expression": "notEmpty(value)",
    "parameters": [
      {
        "name": "value",
        "type": "Dynamischer Wert",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "notEmpty(\"Hello World\")",
        "returnValue": "true",
        "returnType": "Ja/Nein"
      }
    ],
    "isVariable": false
  },
  {
    "name": "combineDateAndTime",
    "description": "combineDateAndTime(today(), \"12:00\") liefert das Datum von heute mit der Uhrzeit 12:00",
    "returns": "Datum",
    "category": "date",
    "categoryName": "Datum",
    "expression": "combineDateAndTime(date, time)",
    "parameters": [
      {
        "name": "date",
        "type": "Datum",
        "optional": false
      },
      {
        "name": "time",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "combineDateAndTime(now(), \"12:00\")",
        "returnValue": "01.01.2022 12:00:00.000",
        "returnType": "Datum"
      }
    ],
    "isVariable": false
  },
  {
    "name": "removeDuplicates",
    "description": "removeDuplicates([1,2,3,1,1,3]) liefert [1,2,3]",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "removeDuplicates(list)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "removeDuplicates([1,2,2,3,4,4])",
        "returnValue": "[1,2,3,4]",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "fileNames",
    "description": "Liste der Dateinamen für eine Liste von Dateien",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "fileNames(list)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "fileNames(files)",
        "returnValue": "[\"Report.txt\", \"Invoice.pdf\"]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "fileUrls",
    "description": "Liste der Download-URLs für eine Liste von Dateien",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "fileUrls(list)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "fileUrls(files)",
        "returnValue": "[\"url1\", \"url2\"]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "fileHashes",
    "description": "Liste der Datei-Hashes für eine Liste von Dateien",
    "returns": "Liste",
    "category": "list",
    "categoryName": "Liste",
    "expression": "fileHashes(list)",
    "parameters": [
      {
        "name": "list",
        "type": "Liste",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "fileHashes(files)",
        "returnValue": "[\"ee6748d5b2b6db8b51380cedce2cb0dd\"]",
        "returnType": "Liste"
      }
    ],
    "isVariable": false
  },
  {
    "name": "urlEncode",
    "description": "Kodiert einen Text ins URL-Format",
    "returns": "Text",
    "category": "text",
    "categoryName": "Text",
    "expression": "urlEncode(text)",
    "parameters": [
      {
        "name": "text",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "urlEncode(\"Hello World\")",
        "returnValue": "Hello%20World",
        "returnType": "Text"
      }
    ],
    "isVariable": false
  },
  {
    "name": "hours",
    "description": "Stunden von einer Uhrzeit",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "hours(timeString)",
    "parameters": [
      {
        "name": "timeString",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "hours(\"16:20\")",
        "returnValue": "16",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "minutes",
    "description": "Minuten von einer Uhrzeit",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "minutes(timeString)",
    "parameters": [
      {
        "name": "timeString",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "minutes(\"16:20\")",
        "returnValue": "20",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  },
  {
    "name": "overlapInMinutes",
    "description": "Überschneidung zweier Uhrzeitspannen in Minuten.",
    "returns": "Zahl",
    "category": "date",
    "categoryName": "Datum",
    "expression": "overlapInMinutes(startTime1, endTime1, startTime2, endTime2)",
    "parameters": [
      {
        "name": "startTime1",
        "type": "Text",
        "optional": false
      },
      {
        "name": "endTime1",
        "type": "Text",
        "optional": false
      },
      {
        "name": "startTime2",
        "type": "Text",
        "optional": false
      },
      {
        "name": "endTime2",
        "type": "Text",
        "optional": false
      }
    ],
    "examples": [
      {
        "expression": "overlapInMinutes(\"17:00\",\"19:00\",\"18:00\",\"20:00\")",
        "returnValue": "60",
        "returnType": "Zahl"
      },
      {
        "expression": "overlapInMinutes(\"13:00\",\"14:00\",\"17:00\",\"18:00\")",
        "returnValue": "0",
        "returnType": "Zahl"
      }
    ],
    "isVariable": false
  }
]